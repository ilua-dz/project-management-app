import { ColumnDeleteRequest, ColumnUpdateRequest, ColumnGetRequest, ColumnCreateRequest } from './../../API/columns';
import { RootState } from './../../app/store';
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {
  IColumn,
  getColumn,
  updateColumn,
  createColumn,
  deleteColumn
} from '../../API/columns';

export interface UserColumnsState {
  columns: IColumn[]
  columnsLoading: boolean;
  columnsError: string;
}

const initialState: UserColumnsState = {
  columns: [],
  columnsLoading: false,
  columnsError: '',
};

export const deleteColumnThunk = createAsyncThunk(
  'boards/deleteBoard',
  async ({boardId, columnId}: Omit<ColumnDeleteRequest, 'token'>, { dispatch, getState, rejectWithValue }) => {
    try {
      const state = getState() as RootState;
      const token = state.userAuthorization.signInData.token;
      await deleteColumn({ boardId, columnId, token });
      dispatch(getColumnThunk({boardId}));
    } catch {
      rejectWithValue(`Board can't be deleted`);
    }
  }
);

export const updateColumnThunk = createAsyncThunk(
  'boards/updateBoard',
  async (
    { boardId, columnId, body }: Omit<ColumnUpdateRequest, 'token'>,
    { dispatch, getState, rejectWithValue }
  ) => {
    try {
      const state = getState() as RootState;
      const token = state.userAuthorization.signInData.token;
      await updateColumn({ boardId, columnId, body, token });
      dispatch(getColumnThunk({boardId}));
    } catch {
      rejectWithValue(`Board can't be updated`);
    }
  }
);

export const getColumnThunk = createAsyncThunk(
  'boards/getBoard',
  async ({boardId, columnId}:Omit<ColumnGetRequest, 'token'>, { getState, rejectWithValue }) => {
    try {
      const state = getState() as RootState;
      const token = state.userAuthorization.signInData.token;
      return await getColumn({ token, boardId, columnId });
    } catch {
      rejectWithValue(`Boards can't be loaded`);
    }
  }
);

export const createColumnThunk = createAsyncThunk(
  'boards/createBoard',
  async ({ boardId, body }: Omit<ColumnCreateRequest, 'token'>, { dispatch, getState, rejectWithValue }) => {
    try {
      const state = getState() as RootState;
      const token = state.userAuthorization.signInData.token;
      await createColumn({ token, boardId, body });
      dispatch(getColumnThunk({boardId}));
    } catch {
      rejectWithValue(`Board can't be created`);
    }
  }
);

export const userBoardsSlice = createSlice({
  name: 'userBoards',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder.addCase(createColumnThunk.rejected, (state, { error }) => {
      state.columnsError = error.message as string;
    });

    builder.addCase(updateColumnThunk.rejected, (state, { error }) => {
      state.columnsError = error.message as string;
    });

    builder.addCase(deleteColumnThunk.rejected, (state, { error }) => {
      state.columnsError = error.message as string;
    });

    builder
      .addCase(getColumnThunk.pending, (state) => {
        state.columnsLoading = true;
      })
      .addCase(getColumnThunk.fulfilled, (state, { payload }) => {
        state.columns = payload as IColumn[];
        state.columnsLoading = false;
        state.columnsError = '';
      })
      .addCase(getColumnThunk.rejected, (state, { error }) => {
        state.columnsLoading = false;
        state.columnsError = error.message as string;
      });
  }
});

export const getAppBoards = (state: RootState) => state.userBoards.boards;
export const getAppBoardsError = (state: RootState) => state.userBoards.boardsError;
export const getAppBoardsLoading = (state: RootState) => state.userBoards.boardsLoading;

export default userBoardsSlice.reducer;
